// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: speech/speech.proto

package speechv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SpeechService_ProcessVoiceConversation_FullMethodName = "/speech.v1.SpeechService/ProcessVoiceConversation"
	SpeechService_HealthCheck_FullMethodName              = "/speech.v1.SpeechService/HealthCheck"
)

// SpeechServiceClient is the client API for SpeechService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SpeechService provides voice conversation processing
type SpeechServiceClient interface {
	// ProcessVoiceConversation handles bidirectional streaming for voice conversations
	// Input: stream of audio data or control messages
	// Output: stream of ASR results, LLM responses, and TTS audio
	ProcessVoiceConversation(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[VoiceRequest, VoiceResponse], error)
	// HealthCheck for service health monitoring
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type speechServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeechServiceClient(cc grpc.ClientConnInterface) SpeechServiceClient {
	return &speechServiceClient{cc}
}

func (c *speechServiceClient) ProcessVoiceConversation(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[VoiceRequest, VoiceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SpeechService_ServiceDesc.Streams[0], SpeechService_ProcessVoiceConversation_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[VoiceRequest, VoiceResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SpeechService_ProcessVoiceConversationClient = grpc.BidiStreamingClient[VoiceRequest, VoiceResponse]

func (c *speechServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, SpeechService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpeechServiceServer is the server API for SpeechService service.
// All implementations must embed UnimplementedSpeechServiceServer
// for forward compatibility.
//
// SpeechService provides voice conversation processing
type SpeechServiceServer interface {
	// ProcessVoiceConversation handles bidirectional streaming for voice conversations
	// Input: stream of audio data or control messages
	// Output: stream of ASR results, LLM responses, and TTS audio
	ProcessVoiceConversation(grpc.BidiStreamingServer[VoiceRequest, VoiceResponse]) error
	// HealthCheck for service health monitoring
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedSpeechServiceServer()
}

// UnimplementedSpeechServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSpeechServiceServer struct{}

func (UnimplementedSpeechServiceServer) ProcessVoiceConversation(grpc.BidiStreamingServer[VoiceRequest, VoiceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ProcessVoiceConversation not implemented")
}
func (UnimplementedSpeechServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedSpeechServiceServer) mustEmbedUnimplementedSpeechServiceServer() {}
func (UnimplementedSpeechServiceServer) testEmbeddedByValue()                       {}

// UnsafeSpeechServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpeechServiceServer will
// result in compilation errors.
type UnsafeSpeechServiceServer interface {
	mustEmbedUnimplementedSpeechServiceServer()
}

func RegisterSpeechServiceServer(s grpc.ServiceRegistrar, srv SpeechServiceServer) {
	// If the following call pancis, it indicates UnimplementedSpeechServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SpeechService_ServiceDesc, srv)
}

func _SpeechService_ProcessVoiceConversation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SpeechServiceServer).ProcessVoiceConversation(&grpc.GenericServerStream[VoiceRequest, VoiceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SpeechService_ProcessVoiceConversationServer = grpc.BidiStreamingServer[VoiceRequest, VoiceResponse]

func _SpeechService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeechServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeechService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeechServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpeechService_ServiceDesc is the grpc.ServiceDesc for SpeechService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpeechService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "speech.v1.SpeechService",
	HandlerType: (*SpeechServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _SpeechService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessVoiceConversation",
			Handler:       _SpeechService_ProcessVoiceConversation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "speech/speech.proto",
}
